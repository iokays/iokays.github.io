[ { "title": "Spring MVC", "url": "/posts/spring-mvc/", "categories": "Spring, Spring MVC", "tags": "Spring, Spring MVC", "date": "2021-04-13 11:33:00 +0800", "snippet": "深入浅出 Spring MVC 的工作原理.https://github.com/iokays/Samples/tree/main/spring_web一个例子@RestController@SpringBootApplicationpublic class SpringMvcSample { @ApiOperation(value = &quot;/&quot;, notes = &quot;print hello&quot;) @GetMapping(value = &quot;/&quot;) public String hello() { return &quot;h..." }, { "title": "设计模式与UML", "url": "/posts/design-pattern/", "categories": "设计模式", "tags": "设计模式, UML, Design Pattern", "date": "2021-04-13 11:33:00 +0800", "snippet": "工厂方法模式 Factory Method Pattern抽象工厂模式 Abstract Factory Pattern建造者模式 Builder Pattern原型模式 Prototype Pattern单例模式 Singleton Pattern适配器模式 Adapter Pattern桥梁模式/桥接模式 Bridge Pattern组合模式 Composite Pattern装饰模式 Decorator Pattern门面模式/外观模式 Facade Pattern享元模式 Flyweight Pattern代理模式 Proxy pattern责任链模式 Chain of Resp..." }, { "title": "Spring AOP", "url": "/posts/spring-aop/", "categories": "Spring, Spring AOP", "tags": "Spring, Spring AOP, JDK动态代理, CGLIB, Aopalliance", "date": "2021-04-13 11:33:00 +0800", "snippet": "JDK 动态代理@ApiModel(description = &quot;JDK动态代理实例&quot;)public class JdkProxySample { public static void main(String[] args) { final QuackBehavior quack = () -&amp;gt; System.out.println(&quot;呱呱叫&quot;); final QuackInvocationHandler quackInvocationHandler = new QuackInvocationHand..." } ]
