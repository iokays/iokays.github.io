<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>彭元彬</title><subtitle>用UML和设计模式分析JAVA常用框架原理.</subtitle> <updated>2021-05-21T18:33:34+08:00</updated> <author> <name>pengyuanbing</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 pengyuanbing </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Spring MVC</title><link href="/posts/spring-mvc/" rel="alternate" type="text/html" title="Spring MVC" /><published>2021-04-13T11:33:00+08:00</published> <updated>2021-05-21T18:31:55+08:00</updated> <id>/posts/spring-mvc/</id> <content src="/posts/spring-mvc/" /> <author> <name>pengyuanbing</name> </author> <category term="Spring" /> <category term="Spring MVC" /> <summary> 深入浅出 Spring MVC 的工作原理. https://github.com/iokays/Samples/tree/main/spring_web 一个例子 @RestController @SpringBootApplication public class SpringMvcSample { @ApiOperation(value = "/", notes = "print hello") @GetMapping(value = "/") public String hello() { return "hello"; } public static void main(String[] args) { SpringApplication.run(SpringMvcSample.class, args); } } 这是... </summary> </entry> <entry><title>设计模式与UML</title><link href="/posts/design-pattern/" rel="alternate" type="text/html" title="设计模式与UML" /><published>2021-04-13T11:33:00+08:00</published> <updated>2021-05-14T19:50:52+08:00</updated> <id>/posts/design-pattern/</id> <content src="/posts/design-pattern/" /> <author> <name>pengyuanbing</name> </author> <category term="设计模式" /> <summary> 工厂方法模式 Factory Method Pattern 抽象工厂模式 Abstract Factory Pattern 建造者模式 Builder Pattern 原型模式 Prototype Pattern 单例模式 Singleton Pattern 适配器模式 Adapter Pattern 桥梁模式/桥接模式 Bridge Pattern 组合模式 Composite Pattern 装饰模式 Decorator Pattern 门面模式/外观模式 Facade Pattern 享元模式 Flyweight Pattern 代理模式 Proxy pattern 责任链模式 Chain of Responsibility Pattern 命令模式 Command Pattern 解释器模式 Interpreter Pattern 迭代器模式 Iterator Patte... </summary> </entry> <entry><title>Spring AOP</title><link href="/posts/spring-aop/" rel="alternate" type="text/html" title="Spring AOP" /><published>2021-04-13T11:33:00+08:00</published> <updated>2021-05-21T09:00:12+08:00</updated> <id>/posts/spring-aop/</id> <content src="/posts/spring-aop/" /> <author> <name>pengyuanbing</name> </author> <category term="Spring" /> <category term="Spring AOP" /> <summary> JDK 动态代理 @ApiModel(description = "JDK动态代理实例") public class JdkProxySample { public static void main(String[] args) { final QuackBehavior quack = () -&amp;gt; System.out.println("呱呱叫"); final QuackInvocationHandler quackInvocationHandler = new QuackInvocationHandler(quack); final QuackBehavior duck = (QuackBehavior) Proxy.newProxyInstance( quack.getCl... </summary> </entry> </feed>
